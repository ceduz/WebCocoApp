# Generated by Django 5.0.4 on 2024-07-10 01:21

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('farmer', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApiParametersFinca',
            fields=[
                ('finca', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='farmer.finca', verbose_name='Nombre de la finca')),
                ('latitud', models.DecimalField(decimal_places=10, max_digits=50, verbose_name='Latitud')),
                ('longitud', models.DecimalField(decimal_places=10, max_digits=50, verbose_name='Longitud')),
                ('date_exceute', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de ejecución')),
                ('date_start', models.DateTimeField(verbose_name='Fecha de inicio para exportación de datos')),
                ('date_end', models.DateTimeField(verbose_name='Fecha de fin para exportación de datos')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'verbose_name': 'Parametros Api (climatológica)',
                'verbose_name_plural': 'Parametros Api (climatologica)',
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='ColumnsApiNasa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, verbose_name='Nombre de la columna')),
                ('description', models.CharField(max_length=500, verbose_name='Descripción')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'verbose_name': 'Columna de la API-NASA',
                'verbose_name_plural': 'Columnas de la API-NASA',
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='ForecastScenarios',
            fields=[
                ('finca', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='farmer.finca', verbose_name='Nombre de la finca')),
                ('steps', models.IntegerField(default=0, verbose_name='Número de pasos')),
                ('n_scenarios', models.IntegerField(default=0, verbose_name='Número de escenarios a simular')),
                ('alpha', models.DecimalField(decimal_places=5, max_digits=20, verbose_name='Nivel de significación')),
                ('data_forecasts', models.TextField()),
                ('forecast_image', models.BinaryField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='MergeScenarios',
            fields=[
                ('finca', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='farmer.finca', verbose_name='Nombre de la finca')),
                ('q', models.IntegerField(default=0, verbose_name='Q')),
                ('tol', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True, verbose_name='Tol')),
                ('a', models.DecimalField(decimal_places=5, max_digits=20, verbose_name='a')),
                ('final_columns', models.TextField()),
                ('final_probs', models.TextField()),
                ('merge_history', models.TextField()),
                ('merge_image', models.BinaryField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='ParamDeterministicModel',
            fields=[
                ('finca', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='farmer.finca', verbose_name='Nombre de la finca')),
                ('altitude', models.DecimalField(decimal_places=10, max_digits=50, verbose_name='Altitud')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='TypeImpFieldDataClima',
            fields=[
                ('finca', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='farmer.finca', verbose_name='Nombre de la finca')),
                ('allsky_sfc_sw_dwn', models.CharField(max_length=50, verbose_name='Tipo de imputución para la columna ALLSKY_SFC_SW_DWN')),
                ('clrsky_sfc_sw_dwn', models.CharField(max_length=50, verbose_name='Tipo de imputución para la columna CLRSKY_SFC_SW_DWN')),
                ('t2m_max', models.CharField(max_length=50, verbose_name='Tipo de imputución para la columna T2M_MAX')),
                ('t2m_min', models.CharField(max_length=50, verbose_name='Tipo de imputución para la columna T2M_MIN')),
                ('t2mdew', models.CharField(max_length=50, verbose_name='Tipo de imputución para la columna T2MDEW')),
                ('prectotcorr', models.CharField(max_length=50, verbose_name='Tipo de imputución para la columna PRECTOTCORR')),
                ('rh2m', models.CharField(max_length=50, verbose_name='Tipo de imputución para la columna RH2M')),
                ('ws2m', models.CharField(max_length=50, verbose_name='Tipo de imputución para la columna WS2M')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
            ],
        ),
        migrations.CreateModel(
            name='DataApiNasa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(max_length=50, verbose_name='Date en formato YYYY-MM-DD')),
                ('allsky_sfc_sw_dwn', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='ALLSKY_SFC_SW_DWN')),
                ('clrsky_sfc_sw_dwn', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='CLRSKY_SFC_SW_DWN')),
                ('t2m_max', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='T2M_MAX')),
                ('t2m_min', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='T2M_MIN')),
                ('t2mdew', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='T2MDEW')),
                ('prectotcorr', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='PRECTOTCORR')),
                ('rh2m', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='RH2M')),
                ('ws2m', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='WS2M')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('api_parameters_finca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='researcher.apiparametersfinca', verbose_name='Parametros API de finca')),
            ],
            options={
                'verbose_name': 'Datos climatilogicos de la finca',
                'verbose_name_plural': 'Datos climatilogicos de la fincas',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='IterativeModelling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_p', models.IntegerField(default=25, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Max p')),
                ('max_q', models.IntegerField(default=25, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Max q')),
                ('max_iterations', models.IntegerField(default=20, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Cantidad de iteraciones')),
                ('n_neighbors', models.IntegerField(default=7, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Cantidad de vecinos')),
                ('contamination', models.DecimalField(decimal_places=2, default=0.1, max_digits=10, validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Contaminación')),
                ('selected_model', models.BinaryField()),
                ('diagnostics_image', models.BinaryField(blank=True, null=True)),
                ('residuals_img', models.BinaryField(blank=True, null=True)),
                ('power', models.DecimalField(decimal_places=10, max_digits=50, verbose_name='power')),
                ('mean', models.DecimalField(decimal_places=10, max_digits=50, verbose_name='mean')),
                ('st_d', models.DecimalField(decimal_places=10, max_digits=50, verbose_name='st_d')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('columns_api_nasa', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='researcher.columnsapinasa', verbose_name='Columna a analizar')),
                ('finca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='farmer.finca', verbose_name='Nombre de la finca')),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='DeterministicModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.PositiveIntegerField(null=True, verbose_name='Time')),
                ('etc', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='ETC')),
                ('irrigation', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='Irrigation')),
                ('draining', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='Draining')),
                ('depletion', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='Depletion')),
                ('paw', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='PAW')),
                ('f_water', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='f_water')),
                ('heat_stress_surplus', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='Heat_Stress_Surplus')),
                ('heat_stress_slack', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='Heat_Stress_Slack')),
                ('water_excess', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='Water_Excess')),
                ('water_optimal', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='Water_Optimal')),
                ('objective_value', models.DecimalField(decimal_places=10, max_digits=50, null=True, verbose_name='Objective_Value')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('param_deterministic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='researcher.paramdeterministicmodel', verbose_name='')),
            ],
            options={
                'ordering': ['created'],
            },
        ),
        migrations.CreateModel(
            name='DataClimImputation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date en formato YYYY-MM-DD')),
                ('allsky_sfc_sw_dwn', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='ALLSKY_SFC_SW_DWN')),
                ('clrsky_sfc_sw_dwn', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='CLRSKY_SFC_SW_DWN')),
                ('t2m_max', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='T2M_MAX')),
                ('t2m_min', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='T2M_MIN')),
                ('t2mdew', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='T2MDEW')),
                ('prectotcorr', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='PRECTOTCORR')),
                ('rh2m', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='RH2M')),
                ('ws2m', models.DecimalField(decimal_places=2, max_digits=50, verbose_name='WS2M')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated', models.DateTimeField(auto_now=True, verbose_name='Fecha de modificación')),
                ('api_parameters_finca', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='researcher.typeimpfielddataclima', verbose_name='Tipo de imputación')),
            ],
            options={
                'ordering': ['date'],
            },
        ),
    ]
